/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
	Not(in = instruction[15], out=notInst);
	Or(a=instruction[5],b= notInst,out=RegOutLoad);
	ARegister(in= MuxOut1 ,load=RegOutLoad,out= ARegOut,out[0..14] = addressM);
	DRegister(in= out1,load=DRegOutLoad ,out=DRegOut ); 	
	Mux16(a=instruction,b=out1,sel= instruction[15],out= MuxOut1 ); 
	Mux16(a= ARegOut,b= inM,sel= instruction[12],out= MuxOut2) ;
	ExtendAlu(x= DRegOut,y=MuxOut2,instruction=instruction[6..14],out=outM,out=out1,zr= zrout,ng=ngout );
	PC(in= ARegOut,load= loadControl,inc= incControl,reset= reset ,out[0..14]=pc );
	And(a=instruction[15],b=instruction[3],out=writeM);
	And(a=instruction[15],b=instruction[4],out=DRegOutLoad);
	Not(in = ngout, out= PreJGT);
	And(a=PreJGT,b=JNE,out=JGT);
	Or(a=JGT,b=zrout,out=JGE);
	Not(in = zrout,out=JNE);
	Or(a=zrout,b=ngout,out=JLE);
	Mux8Way16(a[0..15]= false,b[0] = JGT,b[1..15]= false,c[0] = zrout,c[1..15]= false,d[0]=JGE,d[1..15]= false,e[0]=ngout,e[1..15]= false,f[0] = JNE,f[1..15]= false,g[0]=JLE,g[1..15]= false,h[0]=true,h[1..15]= false,sel=instruction[0..2] ,out[0]=prepcControl,out[1..15] = Junk ); 
	And(a= prepcControl,b=instruction[15],out=pcControl);
	DMux(in= true,sel=pcControl ,a= incControl,b= loadControl ); 
	
	
	
}
