/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
	 ALU(x=x ,y=y ,zx=instruction[5],nx=instruction[4] ,zy=instruction[3] ,ny=instruction[2] ,f=instruction[1] ,no=instruction[0] ,out=outALU ,zr=zrALU ,ng=ngALU ); 
	 ShiftLeft(in=x,out=slx);
	 ShiftLeft(in=y,out=sly);
	 ShiftRight(in=x,out=srx);
	 ShiftRight(in=y,out=sry);
	 
	 Mux16(a=srx,b=slx,sel=instruction[5],out=shiftedX);
	 Mux16(a=sry,b=sly,sel=instruction[5],out=shiftedY);
	 Mux16(a=shiftedY,b=shiftedX,sel=instruction[4],out=shiftRes,out[15]=shiftSign,out[0..7]=shift07,out[8..15]=shift815);
	 Or8Way(in=shift07,out=shifttemp1);
	 Or8Way(in=shift815,out=shifttemp2);
	 Or(a=shifttemp1,b=shifttemp2,out=shiftIsZero);
	 Not(in= shiftIsZero,out=nshiftIsZero);
	 
	 
	 Mul(a=x,b=y,out=mulxy,out[0..7]=mulxy07,out[8..15]=mulxy815,out[15]=Mulsign);
	 Or8Way(in=mulxy07,out=temp1);
	 Or8Way(in=mulxy815,out=temp2);
	 Or(a=temp1,b=temp2,out=MulIsZero);
	 Not(in= MulIsZero,out=nMulIsZero);
	
	 Mux4Way16(a[0..15]=false ,b[0..14]=false,b[15]=nshiftIsZero ,c[0..14]=false,c[15]=nMulIsZero ,d[0..14]=false,d[15]=zrALU ,sel=instruction[7..8] ,out[15]=zr ); 
	 Mux4Way16(a[0..15]=false ,b[0..14]=false,b[15]=shiftSign ,c[0..14]=false,c[15]=Mulsign ,d[0..14]=false,d[15]=ngALU ,sel=instruction[7..8] ,out[15]=ng ); 
	 Mux4Way16(a[0..15]=false ,b=shiftRes ,c=mulxy ,d=outALU ,sel=instruction[7..8] ,out=out ); 
	
	 
        
}
