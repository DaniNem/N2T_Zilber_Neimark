// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array bitTest;
	static int divmem;
    /** Initializes the library. */
    function void init() {
		var int i;
		let bitTest = Array.new(16);
		
		let bitTest[0] = 1;
		let bitTest[1] = 2;
		let bitTest[2] = 4;
		let bitTest[3] = 8;
		let bitTest[4] = 16;
		let bitTest[5] = 32;
		let bitTest[6] = 64;
		let bitTest[7] = 128;
		let bitTest[8] = 256;
		let bitTest[9] = 512;
		let bitTest[10] = 1024;
		let bitTest[11] = 2048;
		let bitTest[12] = 4096;
		let bitTest[13] = 8192;
		let bitTest[14] = 16384;
		let bitTest[15] = 16384 + 16384;
		return;
		
    }
	function boolean bit(int x,int i)
	{
		
		return ((x & bitTest[i]) = bitTest[i]);
	}
    /** Returns the absolute value of x. */
    function int abs(int x) 
	{
		if (x>0)
		{
		return x;
		}
		return -x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum,shifhtedX,j;
		let sum = 0;
		let j = 0;
		let shifhtedX = x;
		while (~(j = 16))
		{
		if (Math.bit(y,j) = true)
			{
					let sum = sum + shifhtedX;
			}
		let shifhtedX = shifhtedX + shifhtedX;
		let j = j + 1 ;			
		}
		return sum;
		
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var boolean xSign,ySign;
		var int result;
		let xSign = Math.bit(x,15);
		let ySign = Math.bit(y,15);
		let x = Math.abs(x);
		let y = Math.abs(y);
		let result = Math.divideHelper(x,y);
		
		if ((xSign  & ySign)|(~xSign & ~ySign ))
		{
			return result;
		}
		
		return -result; 
		
    }
	function int divideHelper(int x,int y)
	{
		
		var int q;
		if ((y > x) | (y < 0))
		{
			let divmem = 0;
			return 0;
		}
		let q = Math.divideHelper(x,y+y);
		if(x-divmem<y)
		{
			return q+q;
		}
		else
		{
			let divmem = divmem + y;
			return q + q + 1;
		}
			
	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int j,y,pow,n;
		let j = 7;
		let y = 0;
		while (~(j=-1))
		{
			let pow = bitTest[j] ;
			let n = Math.multiply((y + pow),(y + pow));
			if ( ((n - 1 ) < (x)) & (n > 0))
			{
				let y = y + pow;
			}
			let j = j - 1;
		}
		return y;
		
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a>b)
		{
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a>b)
		{
			return b;
		}
		return a;
    }
}
