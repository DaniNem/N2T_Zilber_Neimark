// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field int stringLength;
	field int maxStringLength;
	field Array stringArray;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
    	let stringLength = 0;
		if (maxLength < 1)
		{
			let maxLength = 1;
		}
    	let maxStringLength = maxLength;
		
    	let stringArray = Array.new(maxLength);
    	return this;
    }

    /** Disposes this string. */
    method void dispose() {
    	do Memory.deAlloc(this);
    	return;
    }

    /** Returns the current length of this string. */
    method int length() {
    	return stringLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
    	return stringArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
    	let stringArray[j] = c;
    	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    	let stringArray[stringLength] = c;
    	let stringLength = stringLength + 1;
    	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
    	let stringLength = stringLength - 1;
    	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() 
	
	
	{
        var int index,val;
        var boolean isNeg;
        
        let isNeg = false;
        let val = 0;
        let index = 0;
        if(stringArray[index] = 45)
        {
            let isNeg = true;
            let index = index + 1;
        }
        while(index < stringLength)
        {
            let val = (stringArray[index] - 48) + (val * 10);
            let index = index + 1;
        }
        if(isNeg)
        {
            let val = val * -1;
		}
		return val;
	}
     

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {		
        let stringLength = 0;
        if(val < 0)
        {
            let val = val * -1;
            do appendChar(45);
        }
        do setIntHelper(val);
        return;
 
       }

    method void setIntHelper(int val){
    	var int lastDigit;
    	var int res;
		if(val = 0)
        {
            return;
        }
		let res = val / 10;
		let lastDigit = val - (res * 10);
    	do setIntHelper(res);
		do appendChar(lastDigit + 48);
    	return;
    }

    /** Returns the new line character. */
    function char newLine() {
    	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
    	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    	return 34;
    }

}
