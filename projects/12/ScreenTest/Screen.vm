<<<<<<< Updated upstream
function Screen.init 0
push constant 0
not
pop static 0
=======
<<<<<<< Updated upstream
function Screen.init 2
>>>>>>> Stashed changes
push constant 16
call Array.new 1
pop static 1
push constant 0
push static 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 1
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 1
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 1
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 1
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 1
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 1
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 1
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 1
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 1
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 1
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 1
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 1
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 1
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push static 1
add
push constant 16384
push constant 16384
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 16
call Array.new 1
pop static 2
push constant 16
push static 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push static 2
add
push constant 16
push static 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 2
add
push constant 16384
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 2
add
push constant 8192
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 2
add
push constant 4096
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 2
add
push constant 2048
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 2
add
push constant 1024
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 2
add
push constant 512
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 2
add
push constant 256
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 2
add
push constant 128
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 2
add
push constant 64
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 2
add
push constant 32
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 2
add
push constant 16
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 2
add
push constant 8
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 2
add
push constant 4
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 2
add
push constant 2
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push static 2
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 16384
pop static 3
push constant 0
return
function Screen.clearScreen 2
push constant 0
pop local 0
push static 0
pop local 1
push constant 0
pop static 0
label WHILE_EXP0
push local 0
push constant 256
lt
not
if-goto WHILE_END0
push constant 0
push constant 511
push local 0
call Screen.drawHorizntalLine 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
pop static 0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 1
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push static 3
add
push local 0
push static 3
add
pop pointer 1
push that 0
push argument 0
push constant 15
and
push static 1
add
pop pointer 1
push that 0
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE0
push local 0
push static 3
add
push local 0
push static 3
add
pop pointer 1
push that 0
push argument 0
push constant 15
and
push static 1
add
pop pointer 1
push that 0
not
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.drawHorizntalLine 5
push argument 0
push constant 16
call Math.divide 2
pop local 0
push argument 1
push constant 16
call Math.divide 2
pop local 1
push argument 0
push argument 0
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 3
push argument 1
push argument 1
push constant 16
call Math.divide 2
push constant 16
call Math.multiply 2
sub
pop local 4
push local 0
push local 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 32
push argument 2
call Math.multiply 2
push local 0
add
pop local 2
push static 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
push static 3
add
push local 2
push static 3
add
pop pointer 1
push that 0
push local 3
push static 2
add
pop pointer 1
push that 0
push local 4
push static 2
add
pop pointer 1
push that 0
not
and
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END1
label IF_FALSE1
push local 2
push static 3
add
push local 2
push static 3
add
pop pointer 1
push that 0
push local 3
push static 2
add
pop pointer 1
push that 0
push local 4
push static 2
add
pop pointer 1
push that 0
not
and
not
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END1
push constant 0
return
goto IF_END0
label IF_FALSE0
push static 0
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 32
push argument 2
call Math.multiply 2
push local 0
add
pop local 2
push local 2
push static 3
add
push local 2
push static 3
add
pop pointer 1
push that 0
push local 3
push static 2
add
pop pointer 1
push that 0
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 32
push argument 2
call Math.multiply 2
push local 1
add
pop local 2
push local 2
push static 3
add
push local 2
push static 3
add
pop pointer 1
push that 0
push local 4
push constant 1
add
push static 2
add
pop pointer 1
push that 0
not
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
label WHILE_EXP0
push local 1
push local 0
sub
push constant 0
eq
not
not
if-goto WHILE_END0
push constant 32
push argument 2
call Math.multiply 2
push local 0
add
pop local 2
push local 2
push static 3
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
goto IF_END2
label IF_FALSE2
push constant 32
push argument 2
call Math.multiply 2
push local 0
add
pop local 2
push local 2
push static 3
add
push local 2
push static 3
add
pop pointer 1
push that 0
push local 3
push static 2
add
pop pointer 1
push that 0
not
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 32
push argument 2
call Math.multiply 2
push local 1
add
pop local 2
push local 2
push static 3
add
push local 2
push static 3
add
pop pointer 1
push that 0
push local 4
push constant 1
add
push static 2
add
pop pointer 1
push that 0
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
label WHILE_EXP1
push local 1
push local 0
sub
push constant 0
eq
not
not
if-goto WHILE_END1
push constant 32
push argument 2
call Math.multiply 2
push local 0
add
pop local 2
push local 2
push static 3
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
label IF_END2
push constant 0
return
label IF_END0
function Screen.drawLine 8
push constant 0
pop local 0
push constant 0
pop local 1
push argument 0
push argument 2
lt
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
pop local 7
push argument 2
pop argument 0
push local 7
pop argument 2
push argument 1
pop local 7
push argument 3
pop argument 1
push local 7
pop argument 3
label IF_FALSE0
push argument 2
push argument 0
sub
pop local 4
push argument 3
push argument 1
sub
pop local 5
push local 5
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push argument 2
push argument 1
call Screen.drawHorizntalLine 3
pop temp 0
push constant 0
return
label IF_FALSE1
push local 5
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
neg
pop local 3
goto IF_END2
label IF_FALSE2
push constant 1
pop local 3
label IF_END2
push local 4
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
label WHILE_EXP0
push local 1
push local 5
eq
not
not
if-goto WHILE_END0
push argument 0
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 1
push local 3
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push argument 0
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push constant 0
return
label IF_FALSE3
push local 0
push local 4
lt
push local 1
push local 5
lt
and
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
label WHILE_EXP1
push local 0
push local 4
lt
push local 1
push local 5
lt
or
not
if-goto WHILE_END1
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 0
push local 5
call Math.multiply 2
push local 1
push local 4
call Math.multiply 2
sub
pop local 6
push local 6
push constant 0
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 0
push constant 1
add
pop local 0
goto IF_END5
label IF_FALSE5
push local 1
push constant 1
add
pop local 1
label IF_END5
goto WHILE_EXP1
label WHILE_END1
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
goto IF_END4
label IF_FALSE4
label WHILE_EXP2
push local 0
push local 4
lt
push local 1
push local 5
gt
or
not
if-goto WHILE_END2
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 0
push local 5
call Math.multiply 2
push local 1
push local 4
call Math.multiply 2
sub
pop local 6
push local 6
push constant 0
gt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 0
push constant 1
add
pop local 0
goto IF_END6
label IF_FALSE6
push local 1
push constant 1
sub
pop local 1
label IF_END6
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
goto WHILE_EXP2
label WHILE_END2
label IF_END4
push constant 0
return
function Screen.drawRectangle 4
push constant 0
pop local 0
push constant 0
pop local 1
push argument 2
push argument 0
sub
pop local 2
push argument 3
push argument 1
sub
pop local 3
label WHILE_EXP0
push argument 3
push argument 1
sub
push constant 0
eq
not
not
if-goto WHILE_END0
push argument 0
push argument 2
push argument 3
call Screen.drawHorizntalLine 3
pop temp 0
push argument 3
push constant 1
sub
pop argument 3
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 4
push argument 2
push argument 2
call Math.multiply 2
pop local 2
push argument 2
neg
pop local 0
label WHILE_EXP0
push local 0
push argument 2
eq
not
not
if-goto WHILE_END0
push local 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 1
push argument 1
push local 0
add
pop local 3
push argument 0
push local 1
sub
push argument 0
push local 1
add
push local 3
call Screen.drawHorizntalLine 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
push local 1
sub
push argument 0
push local 1
add
push local 3
call Screen.drawHorizntalLine 3
pop temp 0
push constant 0
return
=======
function Screen.init 1
push constant 16384
pop static 1
push constant 0
not
pop static 2
push constant 17
call Array.new 1
pop static 0
push constant 0
push static 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
push local 0
push static 0
add
push local 0
push constant 1
sub
push static 0
add
pop pointer 1
push that 0
push local 0
push constant 1
sub
push static 0
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.clearScreen 1
label WHILE_EXP0
push local 0
push constant 8192
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.updateLocation 0
push static 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push static 1
add
push argument 0
push static 1
add
pop pointer 1
push that 0
push argument 1
or
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END0
label IF_FALSE0
push argument 0
push static 1
add
push argument 0
push static 1
add
pop pointer 1
push that 0
push argument 1
not
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 2
push constant 0
return
function Screen.drawPixel 3
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 7
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
push constant 16
call Math.divide 2
pop local 0
push argument 0
push local 0
push constant 16
call Math.multiply 2
sub
pop local 1
push argument 1
push constant 32
call Math.multiply 2
push local 0
add
pop local 2
push local 2
push local 1
push static 0
add
pop pointer 1
push that 0
call Screen.updateLocation 2
pop temp 0
push constant 0
return
function Screen.drawConditional 0
push argument 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push argument 0
call Screen.drawPixel 2
pop temp 0
goto IF_END0
label IF_FALSE0
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
label IF_END0
push constant 0
return
function Screen.drawLine 11
push argument 0
push constant 0
lt
push argument 2
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 3
push constant 255
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 8
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 2
push argument 0
sub
call Math.abs 1
pop local 3
push argument 3
push argument 1
sub
call Math.abs 1
pop local 2
push local 3
push local 2
lt
pop local 6
push local 6
push argument 3
push argument 1
lt
and
push local 6
not
push argument 2
push argument 0
lt
and
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
pop local 4
push argument 2
pop argument 0
push local 4
pop argument 2
push argument 1
pop local 4
push argument 3
pop argument 1
push local 4
pop argument 3
label IF_FALSE1
push local 6
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 3
pop local 4
push local 2
pop local 3
push local 4
pop local 2
push argument 1
pop local 1
push argument 0
pop local 0
push argument 3
pop local 8
push argument 0
push argument 2
gt
pop local 7
goto IF_END2
label IF_FALSE2
push argument 0
pop local 1
push argument 1
pop local 0
push argument 2
pop local 8
push argument 1
push argument 3
gt
pop local 7
label IF_END2
push constant 2
push local 2
call Math.multiply 2
push local 3
sub
pop local 5
push constant 2
push local 2
call Math.multiply 2
pop local 9
push constant 2
push local 2
push local 3
sub
call Math.multiply 2
pop local 10
push local 1
push local 0
push local 6
call Screen.drawConditional 3
pop temp 0
label WHILE_EXP0
push local 1
push local 8
lt
not
if-goto WHILE_END0
push local 5
push constant 0
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 5
push local 9
add
pop local 5
goto IF_END3
label IF_FALSE3
push local 5
push local 10
add
pop local 5
push local 7
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 0
push constant 1
sub
pop local 0
goto IF_END4
label IF_FALSE4
push local 0
push constant 1
add
pop local 0
label IF_END4
label IF_END3
push local 1
push constant 1
add
pop local 1
push local 1
push local 0
push local 6
call Screen.drawConditional 3
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawRectangle 9
push argument 0
push argument 2
gt
push argument 1
push argument 3
gt
or
push argument 0
push constant 0
lt
or
push argument 2
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 3
push constant 255
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 9
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
push constant 16
call Math.divide 2
pop local 3
push argument 0
push local 3
push constant 16
call Math.multiply 2
sub
pop local 7
push argument 2
push constant 16
call Math.divide 2
pop local 4
push argument 2
push local 4
push constant 16
call Math.multiply 2
sub
pop local 8
push local 7
push static 0
add
pop pointer 1
push that 0
push constant 1
sub
not
pop local 6
push local 8
push constant 1
add
push static 0
add
pop pointer 1
push that 0
push constant 1
sub
pop local 5
push argument 1
push constant 32
call Math.multiply 2
push local 3
add
pop local 0
push local 4
push local 3
sub
pop local 2
label WHILE_EXP0
push argument 1
push argument 3
gt
not
not
if-goto WHILE_END0
push local 0
push local 2
add
pop local 1
push local 2
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push local 5
push local 6
and
call Screen.updateLocation 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 0
push local 6
call Screen.updateLocation 2
pop temp 0
push local 0
push constant 1
add
pop local 0
label WHILE_EXP1
push local 0
push local 1
lt
not
if-goto WHILE_END1
push local 0
push constant 1
neg
call Screen.updateLocation 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push local 1
push local 5
call Screen.updateLocation 2
pop temp 0
label IF_END1
push argument 1
push constant 1
add
pop argument 1
push local 1
push constant 32
add
push local 2
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawHorizontal 11
push argument 1
push argument 2
call Math.min 2
pop local 7
push argument 1
push argument 2
call Math.max 2
pop local 8
push argument 0
push constant 1
neg
gt
push argument 0
push constant 256
lt
and
push local 7
push constant 512
lt
and
push local 8
push constant 1
neg
gt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 7
push constant 0
call Math.max 2
pop local 7
push local 8
push constant 511
call Math.min 2
pop local 8
push local 7
push constant 16
call Math.divide 2
pop local 1
push local 7
push local 1
push constant 16
call Math.multiply 2
sub
pop local 9
push local 8
push constant 16
call Math.divide 2
pop local 2
push local 8
push local 2
push constant 16
call Math.multiply 2
sub
pop local 10
push local 9
push static 0
add
pop pointer 1
push that 0
push constant 1
sub
not
pop local 5
push local 10
push constant 1
add
push static 0
add
pop pointer 1
push that 0
push constant 1
sub
pop local 4
push argument 0
push constant 32
call Math.multiply 2
push local 1
add
pop local 0
push local 2
push local 1
sub
pop local 6
push local 0
push local 6
add
pop local 3
push local 6
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push local 4
push local 5
and
call Screen.updateLocation 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 0
push local 5
call Screen.updateLocation 2
pop temp 0
push local 0
push constant 1
add
pop local 0
label WHILE_EXP0
push local 0
push local 3
lt
not
if-goto WHILE_END0
push local 0
push constant 1
neg
call Screen.updateLocation 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 3
push local 4
call Screen.updateLocation 2
pop temp 0
label IF_END1
label IF_FALSE0
push constant 0
return
function Screen.drawSymetric 0
push argument 1
push argument 3
sub
push argument 0
push argument 2
add
push argument 0
push argument 2
sub
call Screen.drawHorizontal 3
pop temp 0
push argument 1
push argument 3
add
push argument 0
push argument 2
add
push argument 0
push argument 2
sub
call Screen.drawHorizontal 3
pop temp 0
push argument 1
push argument 2
sub
push argument 0
push argument 3
sub
push argument 0
push argument 3
add
call Screen.drawHorizontal 3
pop temp 0
push argument 1
push argument 2
add
push argument 0
push argument 3
sub
push argument 0
push argument 3
add
call Screen.drawHorizontal 3
pop temp 0
push constant 0
return
function Screen.drawCircle 3
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 12
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
push argument 2
sub
push constant 0
lt
push argument 0
push argument 2
add
push constant 511
gt
or
push argument 1
push argument 2
sub
push constant 0
lt
or
push argument 1
push argument 2
add
push constant 255
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 13
call Sys.error 1
pop temp 0
label IF_FALSE1
push argument 2
pop local 1
push constant 1
push argument 2
sub
pop local 2
push argument 0
push argument 1
push local 0
push local 1
call Screen.drawSymetric 4
pop temp 0
label WHILE_EXP0
push local 1
push local 0
gt
not
if-goto WHILE_END0
push local 2
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 2
push constant 2
push local 0
call Math.multiply 2
add
push constant 3
add
pop local 2
goto IF_END2
label IF_FALSE2
push local 2
push constant 2
push local 0
push local 1
sub
call Math.multiply 2
add
push constant 5
add
pop local 2
push local 1
push constant 1
sub
pop local 1
label IF_END2
push local 0
push constant 1
add
pop local 0
push argument 0
push argument 1
push local 0
push local 1
call Screen.drawSymetric 4
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
>>>>>>> Stashed changes
